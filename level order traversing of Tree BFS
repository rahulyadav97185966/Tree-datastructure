#include <bits/stdc++.h>
using namespace std;
struct Node
{
    int data;
     Node *left;
     Node * right;

}*root=NULL,*p = NULL;
void create()
{
    int n;
    cout<<"how many nodes you want to create"<<"\n";
    cin>>n;
    int arr[n];
    cout<<"enter values of nodes"<<endl;
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    for(int i=0;i<n;i++)
    {
        if(root == NULL)
        {
            root = new Node;
            root->data=arr[i];
            root->left=NULL;
            root->right=NULL;

        }
        else
        {

            p = root;
            while(true)
            {
                if(arr[i] < p->data)
                {
                    if(p->left == NULL)
                    {
                        p->left = new Node;
                        p=p->left;
                        p->data=arr[i];
                        p->left=NULL;
                        p->right=NULL;
                        break;
                    }
                    else{
                        p=p->left;
                    }
                }
                else
                {
                    if(p->right == NULL)
                    {
                        p->right = new Node;
                        p=p->right;
                        p->data=arr[i];
                        p->left=NULL;
                        p->right=NULL;
                        break;
                    }
                    else
                    {
                        p=p->right;
                    }
                }
            }
        }

    }
}
void level_order(Node *p)
{
    if(p == NULL)
        return;
    queue<Node *> q;
    q.push(p);
    while(q.empty() == false)
    {
        Node *node = q.front();
        cout<<node->data<<" ";
        q.pop();
        if(node->left != NULL)
            q.push(node->left);
        if(node->right != NULL)
            q.push(node->right);

    }
}
void printGivenLevel(Node* root, int level);
int height(Node* node);
Node* newNode(int data);
void level_order_without_queue(Node* root)
{
    int h = height(root);
    int i;
    for (i = 1; i <= h; i++)
        printGivenLevel(root, i);
}
void printGivenLevel(Node* root, int level)
{
    if (root == NULL)
        return;
    if (level == 1)
        cout << root->data << " ";
    else if (level > 1)
    {
        printGivenLevel(root->left, level-1);
        printGivenLevel(root->right, level-1);
    }
}
int height(Node* node)
{
    if (node == NULL)
        return 0;
    else
    {
        int lheight = height(node->left);
        int rheight = height(node->right);

        if (lheight > rheight)
            return(lheight + 1);
        else return(rheight + 1);
    }
}
int main()
{

    create();
    cout<<"level order traversal of a tree using queue is"<<endl;
    level_order(root);
    cout<<"\nlevel order traversal of tree without using queue is"<<endl;
    level_order_without_queue(root);




    return 0;
}
