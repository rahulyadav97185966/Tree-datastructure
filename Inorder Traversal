#include <bits/stdc++.h>
using namespace std;
struct Node
{
    int data;
     Node *left;
     Node * right;

}*root=NULL,*p = NULL;
void create()
{
    int n;
    cout<<"how many nodes you want to create"<<"\n";
    cin>>n;
    int arr[n];
    cout<<"enter values of nodes"<<endl;
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    for(int i=0;i<n;i++)
    {
        if(root == NULL)
        {
            root = new Node;
            root->data=arr[i];
            root->left=NULL;
            root->right=NULL;

        }
        else
        {

            p = root;
            while(true)
            {
                if(arr[i] < p->data)
                {
                    if(p->left == NULL)
                    {
                        p->left = new Node;
                        p=p->left;
                        p->data=arr[i];
                        p->left=NULL;
                        p->right=NULL;
                        break;
                    }
                    else{
                        p=p->left;
                    }
                }
                else
                {
                    if(p->right == NULL)
                    {
                        p->right = new Node;
                        p=p->right;
                        p->data=arr[i];
                        p->left=NULL;
                        p->right=NULL;
                        break;
                    }
                    else
                    {
                        p=p->right;
                    }
                }
            }
        }

    }
}
void inorder(Node *p)
{
    if (p != NULL)
    {
        inorder(p->left);
        cout<<p->data<<" ";
        inorder(p->right);
    }
}
void inOrder(Node *p)
{
    stack<Node *> s;
    while(p!= NULL || s.empty()==false)
    {
        while(p!=NULL)
        {
            s.push(p);
            p= p->left;
        }
        p=s.top();
        s.pop();
        cout<<p->data<<" ";
        p = p->right;

    }
}
void MorrisTraversal(struct Node *root)
{
    struct Node *current,*pre;
    if(root == NULL)
        return;
    current = root;
    while(current != NULL)
    {
        if(current->left == NULL)
        {
            cout<<current->data<<" ";
            current = current->right;

        }
        else{
            pre=current->left;
            while(pre->right!=NULL && pre->right != current)
                pre=pre->right;
            if(pre->right == NULL)
            {
                pre->right = current;
                current = current->left;

            }
            else
            {
                pre->right=NULL;
                cout<<current->data<<" ";
                current = current->right;
            }
        }


    }
}
int main()
{

    create();
    cout<<"inorder traversal of tree with recursion is"<<"\n";
    inorder(root);
    cout<<"\n inorder traversal of tree without recursion is"<<"\n";
    inOrder(root);
    cout<<" \n inorder traversal of tree with Morris Traversal"<<"\n";
    MorrisTraversal(root);

    return 0;
}
